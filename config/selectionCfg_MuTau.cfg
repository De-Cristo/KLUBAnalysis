
# the definition of composed selections. Can contain as well TCut style selections, e.g.:
# resolved = baseline, btagMM, massCut
# resolvedHighPt = baseline, btagMM, massCut, dau1_pt > 150
# use comma separated lists
[selections]

baseline     = pairType == 0 && dau1_pt > 23 && abs (dau1_eta) < 2.1 && dau2_pt > 20 && abs (dau2_eta) < 2.3 && nleps == 0
btagL        = bjet1_bID > 0.460 && bjet2_bID < 0.460
btagM        = bjet1_bID > 0.800 && bjet2_bID < 0.800   
btagLL       = bjet1_bID > 0.460 && bjet2_bID > 0.460
btagMM       = bjet1_bID > 0.800 && bjet2_bID > 0.800
massCut      = bH_mass_raw > 80 && bH_mass_raw < 160 && tauH_SVFIT_mass > 80 && tauH_SVFIT_mass < 160
massCutCent  = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && bH_mass_raw > 74.5 && bH_mass_raw < 147.5
boostMassCut = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && fatjet_softdropMass > 90 && fatjet_softdropMass < 160
circMassCut    = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) <  40.0
ellypsMassCut  = ((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.))/(35.*35.) + ((bH_mass_raw-111.)*(bH_mass_raw-111.))/(45.*45.) <  1.0
ringCut = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) >  40.0 && TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) < 60.0
MTcut        = mT1 < 30
resBDTCut    = BDTResonant > 0.4
nonresBDTCut = LepTauKine > -0.134

### to optimize the BDT WP, these are the cuts for the X% rejection efficiency on the ttbar, in the 2b0j resolved region
### three sets of cuts for the three BDT trained. NOTE: signal efficiencies associated can change depending on the signal!
nrBDTCut50rej = LepTauKine > -0.662135998321
nrBDTCut60rej = LepTauKine > -0.57565599854
nrBDTCut70rej = LepTauKine > -0.447063998866
nrBDTCut80rej = LepTauKine > -0.262071999335
nrBDTCut85rej = LepTauKine > -0.128215999675
nrBDTCut90rej = LepTauKine > 0.089111999774

lmrBDTCut50rej = BDTResonantLM > -0.5948
lmrBDTCut60rej = BDTResonantLM > -0.3548
lmrBDTCut70rej = BDTResonantLM > -0.0764
lmrBDTCut80rej = BDTResonantLM > 0.2404
lmrBDTCut85rej = BDTResonantLM > 0.3748
lmrBDTCut90rej = BDTResonantLM > 0.4772

hmrBDTCut50rej = BDTResonantHM > -0.9212
hmrBDTCut60rej = BDTResonantHM > -0.8644
hmrBDTCut70rej = BDTResonantHM > -0.7492
hmrBDTCut80rej = BDTResonantHM > -0.5148
hmrBDTCut85rej = BDTResonantHM > -0.2988
hmrBDTCut90rej = BDTResonantHM > 0.0188

nr2017BDTCut50rej  = BDTNonResonant >  -0.7884
nr2017BDTCut60rej  = BDTNonResonant >  -0.6716
nr2017BDTCut70rej  = BDTNonResonant >  -0.4788
nr2017BDTCut80rej  = BDTNonResonant >  -0.1548
nr2017BDTCut85rej  = BDTNonResonant >  0.0604
nr2017BDTCut90rej  = BDTNonResonant >  0.3044


SR           = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 3
SStight      = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 3   
OSrlx        = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1
SSrlx        = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1
OSinviso     = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1 && dau2_MVAiso < 3
SSinviso     = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1 && dau2_MVAiso < 3

# resolved     = baseline, btagMM, massCut, isBoosted != 1
# dummySel     = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20
# dummySel2    = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20 && bjet1_pt > 30
# SR           = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOStight   = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOSrlx     = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSStight   = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSSrlx     = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 

# defaultNoIso               = baseline
# defaultBtagLLNoIso         = baseline, btagLL      
# defaultBtagLLNoIsoBBTTCut  = baseline, btagLL, massCutCent, HH_mass_raw > 200             
# defaultBtagLLNoIsoBBTTCutCirc  = baseline, btagLL, circMassCut, HH_mass_raw > 200             

s1b1j        = baseline , btagM
s2b0j        = baseline , btagMM

s1b1jresolved = baseline , btagM, isBoosted != 1
s2b0jresolved = baseline , btagMM, isBoosted != 1
sboostedLL    = baseline , btagLL, isBoosted == 1
sboostedMM    = baseline , btagMM, isBoosted == 1

s1b1jresolvedMcut = baseline , btagM, isBoosted != 1 , circMassCut
s2b0jresolvedMcut = baseline , btagMM, isBoosted != 1 , circMassCut

s2b0jresolvedRingCut = baseline , btagMM, isBoosted != 1 , ringCut


s1b1jresolvedMcutBDT = baseline , btagM, isBoosted != 1 , circMassCut, nonresBDTCut
s2b0jresolvedMcutBDT = baseline , btagMM, isBoosted != 1 , circMassCut, nonresBDTCut
sboostedLLMcut       = baseline , btagLL, isBoosted == 1 , boostMassCut
sboostedMMMcut       = baseline , btagMM, isBoosted == 1 , boostMassCut


s1b1jMcut    = baseline , btagM , circMassCut
s2b0jMcut    = baseline , btagMM , circMassCut
s1b1jMcutBDT = baseline , btagM , circMassCut, nonresBDTCut
s2b0jMcutBDT = baseline , btagMM , circMassCut, nonresBDTCut

#### uncomment this later!!
# s1b1jresolvedMcutnr90  = s1b1jresolvedMcut, nrBDTCut90rej
# s1b1jresolvedMcutlmr90 = s1b1jresolvedMcut, lmrBDTCut90rej
# s1b1jresolvedMcuthmr90 = s1b1jresolvedMcut, hmrBDTCut90rej

# s2b0jresolvedMcutnr90  = s2b0jresolvedMcut, nrBDTCut90rej
# s2b0jresolvedMcutlmr90 = s2b0jresolvedMcut, lmrBDTCut90rej
# s2b0jresolvedMcuthmr90 = s2b0jresolvedMcut, hmrBDTCut90rej

# s1b1jresolvedMcutlmr70 = s1b1jresolvedMcut, lmrBDTCut70rej
# s2b0jresolvedMcutlmr70 = s2b0jresolvedMcut, lmrBDTCut70rej

# s2b0jresolvedMcutElypslmr70 = baseline , btagMM, isBoosted != 1 , ellypsMassCut, lmrBDTCut70rej

# s1b1jresolvedMcutLepTauKine = s1b1jresolvedMcut, nonresBDTCut
# s2b0jresolvedMcutLepTauKine = s2b0jresolvedMcut, nonresBDTCut

# let's scan the BDTs performance
# s2b0jresolvedMcutMTCut = baseline , btagMM, isBoosted != 1 , circMassCut, MTcut

s2b0jresolvedMcutnr50 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut50rej
s2b0jresolvedMcutnr60 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut60rej
s2b0jresolvedMcutnr70 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut70rej
s2b0jresolvedMcutnr80 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut80rej
s2b0jresolvedMcutnr85 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut85rej
s2b0jresolvedMcutnr90 = baseline , btagMM, isBoosted != 1 , circMassCut, nrBDTCut90rej

s2b0jresolvedMcutnr201750 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut50rej
s2b0jresolvedMcutnr201760 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut60rej
s2b0jresolvedMcutnr201770 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut70rej
s2b0jresolvedMcutnr201780 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut80rej
s2b0jresolvedMcutnr201785 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut85rej
s2b0jresolvedMcutnr201790 = baseline , btagMM, isBoosted != 1 , circMassCut, nr2017BDTCut90rej

s2b0jresolvedMcutlmr50 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut50rej
s2b0jresolvedMcutlmr60 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut60rej
s2b0jresolvedMcutlmr70 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut70rej
s2b0jresolvedMcutlmr80 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut80rej
s2b0jresolvedMcutlmr85 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut85rej
s2b0jresolvedMcutlmr90 = baseline , btagMM, isBoosted != 1 , circMassCut, lmrBDTCut90rej

s2b0jresolvedMcuthmr50 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut50rej
s2b0jresolvedMcuthmr60 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut60rej
s2b0jresolvedMcuthmr70 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut70rej
s2b0jresolvedMcuthmr80 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut80rej
s2b0jresolvedMcuthmr85 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut85rej
s2b0jresolvedMcuthmr90 = baseline , btagMM, isBoosted != 1 , circMassCut, hmrBDTCut90rej



#########################################################################
#########################################################################

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
baseline = MC_weight, IdAndIsoSF, trigSF, PUReweight
btagLL = bTagweightL, DYscale_LL
btagMM = bTagweightM, DYscale_MM
btagL = bTagweightL, DYscale_LL ## fixme: should DY scale be rederived for single tag?
btagM = bTagweightM, DYscale_MM ## fixme: should DY scale be rederived for single tag?

#########################################################################
#########################################################################

[sampleWeights]
TTfullyHad = TTtopPtreweight
TTfullyLep = TTtopPtreweight
TTsemiLep  = TTtopPtreweight

#########################################################################
#########################################################################


# define alternative weights to be tested instead of the nominal one
[systematics]
TTtopPtreweight  = topUp:TTtopPtreweight_up , topDown:TTtopPtreweight_down
# trigSF         = trigUP:trigSF_up , trigDOWN:trigSF_down
# turnOnreweight = rewUP:turnOnreweight_tauup, rewDO:turnOnreweight_taudown

#########################################################################
#########################################################################

# ROOT-like definition of the binning
[histos]
mT                = 20, 0, 200
HH_pt             = 50, 0, 500
HHKin_mass        = 50, 250, 1000
bjet1_bID         = 20, -0.5, 1.5
bjet2_bID         = 20, -0.5, 1.5
HH_deltaPhi       = 15, 0., 3.14159
tauHMet_deltaPhi  = 15, 0., 3.14159
bHMet_deltaPhi    = 15, 0., 3.14159
ditau_deltaPhi    = 15, 0., 3.14159
dib_deltaPhi      = 15, 0., 3.14159
dau1_pt           = 20, 0, 400
dau1_eta          = 25, -2.5, 2.5
dau1_phi          = 25, -3.14159, 3.14159
dau1_iso          = 24, 0, 8
dau2_pt           = 20, 0, 400
dau2_eta          = 25, -2.5, 2.5
dau2_phi          = 25, -3.14159, 3.14159
dau2_iso          = 24, 0, 8
bjet1_pt          = 25, 0, 500
bjet2_pt          = 25, 0, 500
bjet1_eta         = 30, -3.0, 3.0
bjet2_eta         = 30, -3.0, 3.0
bjet1_phi         = 25, -3.14159, 3.14159
bjet2_phi         = 25, -3.14159, 3.14159
met_et            = 50, 0, 500
met_phi           = 25, -3.14159, 3.14159
bH_mass           = 25, 10, 510
tauH_mass         = 25, 10, 510
bH_mass_raw       = 50, 0, 500
tauH_SVFIT_mass   = 50, 0, 500
HHmass            = 25, 0, 1000
njets             = 20,-0.5,19.5
npv               = 50, 0, 50
tauHMetdeltaPhi   = 25, 0, 3.15
bHMetdeltaPhi     = 25, 0, 3.15
ditau_deltaR       = 25, 0, 5
dib_deltaR         = 25, 0, 5
dau1MET_deltaphi       = 25, 0, 3.14159
tauHsvfitMet_deltaPhi = 25, 0, 3.14159
mT1                   = 20, 0, 200.
mT2                   = 20, 0, 200.
HHsvfit_deltaPhi      = 25, 0, 3.14159
dib_deltaR_per_bHpt          = 60, 0, 600
ditau_deltaR_per_tauHsvfitpt = 60, 0, 600
BDTResonant           = 25,-1,1
BDTResonantLM         = 25,-1,1
BDTResonantHM         = 25,-1,1
BDTNonResonant        = 25,-1,1
LepTauKine            = 25,-0.94,0.94

#########################################################################
#########################################################################

# user defined binning for a variable - has precedence on [histos]
[binning]
HH_mass             = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw         = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw_tauup   = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw_taudown = 200, 250, 300, 350, 450, 600, 1000
HHKin_mass          = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600
# HHKin_mass_raw      = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600
# HHKin_mass_raw      = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000

HHKin_mass_raw          = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 850, 1000
HHKin_mass_raw_tauup    = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 850, 1000
HHKin_mass_raw_taudown  = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 850, 1000
HHKin_mass_raw_jetup    = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 850, 1000
HHKin_mass_raw_jetdown  = 250, 260, 270, 280, 290, 300, 325, 350, 375, 400, 425, 450, 475, 500, 550, 600, 650, 700, 850, 1000

bH_mass             = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# bH_mass_raw         = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# bH_mass_raw         = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
fatjet_softdropMass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# MT2                 = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500, 600
MT2                 = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500
MT2_tauup           = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500
MT2_taudown         = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500
MT2_jetup           = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500
MT2_jetdown         = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500
#########################################################################
#########################################################################

[histos2D]
tauH_SVFIT_mass:bH_mass_raw = 100, 0, 500, 100, 0, 500
tauH_SVFIT_mass:dau1_pt     = 100, 0, 500, 100, 0, 500
# user defined binning for a variable - will override the definition in [histos2D]
# NOTE: if both x and y binnings are defined, there is no need to insert a binning in [histos2D]
# note: to specify an user binning for a certain axis of a 2D plot, e.g. a binning for B in A:B, use '@' :
# A:B@B = 0, 15, 20, 30, 50, 1000
[binning2D]
# tauH_SVFIT_mass:bH_mass_raw@bH_mass_raw     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass:bH_mass_raw@tauH_SVfit_mass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500