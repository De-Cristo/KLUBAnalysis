
# the definition of composed selections. Can contain as well TCut style selections, e.g.:
# resolved = baseline, btagMM, massCut
# resolvedHighPt = baseline, btagMM, massCut, dau1_pt > 150
# use comma separated lists
[selections]

baseline     = pairType == 0 && dau1_pt > 23 && abs (dau1_eta) < 2.1 && dau2_pt > 20 && abs (dau2_eta) < 2.3 && nleps == 0
btagL        = bjet1_bID > 0.460 && bjet2_bID < 0.460
btagM        = bjet1_bID > 0.800 && bjet2_bID < 0.800   
btagLL       = bjet1_bID > 0.460 && bjet2_bID > 0.460
btagMM       = bjet1_bID > 0.800 && bjet2_bID > 0.800
massCut      = bH_mass_raw > 80 && bH_mass_raw < 160 && tauH_SVFIT_mass > 80 && tauH_SVFIT_mass < 160
massCutCent  = tauH_SVFIT_mass > 79.5 && tauH_SVFIT_mass < 152.5 && bH_mass_raw > 74.5 && bH_mass_raw < 147.5
circMassCut  = TMath::Sqrt((tauH_SVFIT_mass-116.)*(tauH_SVFIT_mass-116.) + (bH_mass_raw-111.)*(bH_mass_raw-111.)) <  40.0
resBDTCut    = BDTResonant > 0.4
nonresBDTCut = LepTauKine > -0.134
SR           = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 3
SStight      = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 3   
OSrlx        = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1
SSrlx        = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1
OSinviso     = isOS != 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1 && dau2_MVAiso < 3
SSinviso     = isOS == 0 && dau1_iso < 0.15 && dau2_MVAiso >= 1 && dau2_MVAiso < 3

# resolved     = baseline, btagMM, massCut, isBoosted != 1
# dummySel     = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20
# dummySel2    = btagMM, pairType == 0 && dau1_pt > 19 && dau2_pt > 20 && bjet1_pt > 30
# SR           = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOStight   = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdOSrlx     = isOS != 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSStight   = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 
# qcdSSrlx     = isOS == 0 && dau1_iso < 0.1 && dau2_iso < 3.0 

# defaultNoIso               = baseline
# defaultBtagLLNoIso         = baseline, btagLL      
# defaultBtagLLNoIsoBBTTCut  = baseline, btagLL, massCutCent, HH_mass_raw > 200             
# defaultBtagLLNoIsoBBTTCutCirc  = baseline, btagLL, circMassCut, HH_mass_raw > 200             

1b1j        = baseline , btagM
2b0j        = baseline , btagMM

1b1jresolved = baseline , btagM, isBoosted != 1
2b0jresolved = baseline , btagMM, isBoosted != 1
boostedLL    = baseline , btagLL, isBoosted == 1
boostedMM    = baseline , btagMM, isBoosted == 1

1b1jMcut    = baseline , btagM , circMassCut
2b0jMcut    = baseline , btagMM , circMassCut
1b1jMcutBDT = baseline , btagM , circMassCut, nonresBDTCut
2b0jMcutBDT = baseline , btagMM , circMassCut, nonresBDTCut


#########################################################################
#########################################################################

## weights to be applied for a certain selections when calling Fill()
## multiple weights are passed as list and are multiplied together
## NOTE: no weight is applied for data (the simple Fill() is used)
[selectionWeights]
baseline = MC_weight, IdAndIsoSF, trigSF, PUReweight
btagLL = bTagweightL, DYscale_LL
btagMM = bTagweightM, DYscale_MM
btagL = bTagweightL, DYscale_LL ## fixme: should DY scale be rederived for single tag?
btagM = bTagweightM, DYscale_MM ## fixme: should DY scale be rederived for single tag?

#########################################################################
#########################################################################

[sampleWeights]
TTfullyHad = TTtopPtreweight
TTfullyLep = TTtopPtreweight
TTsemiLep  = TTtopPtreweight

#########################################################################
#########################################################################


# define alternative weights to be tested instead of the nominal one
[systematics]
TTtopPtreweight  = topUP:TTtopPtreweight_up , topDOWN:TTtopPtreweight_down
# trigSF         = trigUP:trigSF_up , trigDOWN:trigSF_down
# turnOnreweight = rewUP:turnOnreweight_tauup, rewDO:turnOnreweight_taudown

#########################################################################
#########################################################################

# ROOT-like definition of the binning
[histos]
mT                = 20, 0, 200
HH_pt             = 50, 0, 500
HHKin_mass        = 50, 250, 1000
bjet1_bID         = 20, -0.5, 1.5
bjet2_bID         = 20, -0.5, 1.5
HH_deltaPhi       = 15, 0., 3.14159
tauHMet_deltaPhi  = 15, 0., 3.14159
bHMet_deltaPhi    = 15, 0., 3.14159
ditau_deltaPhi    = 15, 0., 3.14159
dib_deltaPhi      = 15, 0., 3.14159
dau1_pt           = 20, 0, 400
dau1_eta          = 25, -2.5, 2.5
dau1_phi          = 25, -3.14159, 3.14159
dau1_iso          = 24, 0, 8
dau2_pt           = 20, 0, 400
dau2_eta          = 25, -2.5, 2.5
dau2_phi          = 25, -3.14159, 3.14159
dau2_iso          = 24, 0, 8
bjet1_pt          = 25, 0, 500
bjet2_pt          = 25, 0, 500
bjet1_eta         = 30, -3.0, 3.0
bjet2_eta         = 30, -3.0, 3.0
bjet1_phi         = 25, -3.14159, 3.14159
bjet2_phi         = 25, -3.14159, 3.14159
met_et            = 50, 0, 500
met_phi           = 25, -3.14159, 3.14159
bH_mass           = 25, 10, 510
tauH_mass         = 25, 10, 510
tauH_SVFIT_mass   = 25, 10, 510
HHmass            = 25, 0, 1000
njets             = 20,-0.5,19.5
npv               = 50, 0, 50
tauHMetdeltaPhi   = 25, 0, 3.15
bHMetdeltaPhi     = 25, 0, 3.15
ditau_deltaR       = 25, 0, 5
dib_deltaR         = 25, 0, 5
dau1MET_deltaphi       = 25, 0, 3.14159
tauHsvfitMet_deltaPhi = 25, 0, 3.14159
mT1                   = 20, 0, 200.
mT2                   = 20, 0, 200.
HHsvfit_deltaPhi      = 25, 0, 3.14159
BDTResonant           = 25,-1,1
LepTauKine            = 25,-0.94,0.94


#########################################################################
#########################################################################

# user defined binning for a variable - has precedence on [histos]
[binning]
HH_mass             = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw         = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw_tauup   = 200, 250, 300, 350, 450, 600, 1000
HH_mass_raw_taudown = 200, 250, 300, 350, 450, 600, 1000
HHKin_mass          = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600
HHKin_mass_raw      = 250, 275, 300, 350, 400, 450, 500, 600, 700, 850, 1000, 1600
bH_mass             = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
bH_mass_raw         = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
fatjet_softdropMass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
tauH_SVFIT_mass     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
MT2                 = 0, 25, 50, 75, 100, 125, 150, 175, 200, 250, 300, 350, 500, 600

#########################################################################
#########################################################################

[histos2D]
tauH_SVFIT_mass:bH_mass_raw = 100, 0, 500, 100, 0, 500
tauH_SVFIT_mass:dau1_pt     = 100, 0, 500, 100, 0, 500
# user defined binning for a variable - will override the definition in [histos2D]
# NOTE: if both x and y binnings are defined, there is no need to insert a binning in [histos2D]
# note: to specify an user binning for a certain axis of a 2D plot, e.g. a binning for B in A:B, use '@' :
# A:B@B = 0, 15, 20, 30, 50, 1000
[binning2D]
# tauH_SVFIT_mass:bH_mass_raw@bH_mass_raw     = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500
# tauH_SVFIT_mass:bH_mass_raw@tauH_SVfit_mass = 10, 35, 60, 85, 110, 135, 160, 185, 210, 250, 300, 350, 400, 500